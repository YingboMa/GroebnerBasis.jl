function test_msolve_qq_l2()
    print("Msolve.msolve_qq_l2...")
    n = 4
    vars = Array{String, 1}(undef, n)
    # generate dummy array of n strings for generating
    # singular polynomial ring
    for i = 1:n
        vars[i] = "x$(i)"
    end
    R, X = Singular.PolynomialRing(
            Singular.QQ, vars, ordering = :degrevlex)
    global X
    # parses X[i] to xi
    [ eval(Meta.parse("$s = X[$i]")) for (i, s) in enumerate(vars) ]
    gens = [
        x1+2*x2+2*x3+2*x4-1,
        x1^2+2*x2^2+2*x3^2+2*x4^2-x1,
        2*x1*x2+2*x2*x3+2*x3*x4-x2,
        x2^2+2*x1*x3+2*x2*x4-x3
       ]

    id = Singular.Ideal(R, gens)

    sols = msolve(id, la_option=2)

    @test length(sols) == 6

    test_sols=[
               [5221121991829859395//9223372036854775808, 1376067712062205983//9223372036854775808, 2356936539502020145//9223372036854775808, -1773444330549010351039//9444732965739290427392], [8116705438486101663//18446744073709551616, 2833042174119636653//9223372036854775808, 487733097575731645//4611686018427387904, -5021690718065612612481//37778931862957161709568], [1//1, 0//1, 0//1, 0//1], [13766399846697459097//18446744073709551616, 2153422141472502827//9223372036854775808, -851353881404752243//4611686018427387904, 46039787397761586515//590295810358705651712], [6920971994354151069//36893488147419103232, 722685815883263375//9223372036854775808, 339395697759429703//4611686018427387904, 38421910449864642395061//151115727451828646838272], [12297829382473034411//36893488147419103232, 1//36893488147419103232, 1//36893488147419103232, 787061080478274202283//2361183241434822606848]
                   ]

    for i in 1:length(sols)
        @test sols[i] == test_sols[i]
    end

    println("PASS")
end


function test_msolve()
    test_msolve_qq_l2()
    println("")
end
